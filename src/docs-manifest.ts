
// This file is auto-generated by scripts/generate-docs-manifest.js
// Do not edit this file directly.

import type { ComponentItem, ExampleItem } from 'vue-atomic-docs/src/types'; // Reference types from the installed package

export const components: ComponentItem[] = [
  {
    "type": "component",
    "label": "SimpleTest",
    "relativePath": "components/SimpleTest.vue",
    "importer": () => import('./components/SimpleTest.vue'),
    "rawImporter": () => import('./components/SimpleTest.vue?raw')
  },
  {
    "type": "component",
    "label": "DocSteps",
    "relativePath": "components/DocSteps.vue",
    "importer": () => import('./components/DocSteps.vue'),
    "rawImporter": () => import('./components/DocSteps.vue?raw')
  },
  {
    "type": "component",
    "label": "BoxDemo",
    "relativePath": "components/BoxDemo.vue",
    "importer": () => import('./components/BoxDemo.vue'),
    "rawImporter": () => import('./components/BoxDemo.vue?raw')
  },
  {
    "type": "component",
    "label": "Step1Install",
    "relativePath": "components/AtomicDocsSetupSteps/Step1Install.vue",
    "importer": () => import('./components/AtomicDocsSetupSteps/Step1Install.vue'),
    "rawImporter": () => import('./components/AtomicDocsSetupSteps/Step1Install.vue?raw')
  }
];


export const exampleComponents: ExampleItem[] = [
  {
    "type": "example",
    "label": "SimpleTest",
    "relativePath": "component-examples/SimpleTest.vue",
    "importer": () => import('./component-examples/SimpleTest.vue')
  },
  {
    "type": "example",
    "label": "BoxDemo",
    "relativePath": "component-examples/BoxDemo.vue",
    "importer": () => import('./component-examples/BoxDemo.vue')
  },
  {
    "type": "example",
    "label": "Step1Install",
    "relativePath": "component-examples/AtomicDocsSetupSteps/Step1Install.vue",
    "importer": () => import('./component-examples/AtomicDocsSetupSteps/Step1Install.vue')
  }
];


// Pre-computed module mappings for direct use with the plugin
export const componentModules: Record<string, () => Promise<any>> = components.reduce((acc, comp) => {
  acc[comp.relativePath] = comp.importer;
  return acc;
}, {});

export const rawComponentSourceModules: Record<string, () => Promise<string>> = components.reduce((acc, comp) => {
  if (comp.rawImporter) {
    acc[comp.relativePath] = comp.rawImporter;
  }
  return acc;
}, {});

export const exampleModules: Record<string, () => Promise<any>> = exampleComponents.reduce((acc, example) => {
  acc[example.relativePath] = example.importer;
  return acc;
}, {});